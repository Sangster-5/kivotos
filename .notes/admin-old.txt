        <>
                    <h1 className='px-20 text-2xl font-bold mt-4'>Welcome, {user.name}</h1>

                    <div className='flex flex-col w-full justify-center px-20 py-8 gap-y-2'>
                        <div className="flex flex-row gap-x-2">
                            <button id="tasks-tab" onClick={handleTabBtnClick} className='border-2 px-2'>Tasks</button>
                            {user.approve_applications && <button id="applications-tab" onClick={handleTabBtnClick} className='border-2 px-2'>Applications</button>}
                            {user.tasks_admin && <button id="requests-tab" onClick={handleTabBtnClick} className='border-2 px-2'>Incoming Requests</button>}
                            {user.tasks_admin && <button id="complaints-tab" onClick={handleTabBtnClick} className='border-2 px-2'>Complaints</button>}
                            {user.create_leases && <button id="leases-tab" onClick={handleTabBtnClick} className='border-2 px-2'>Leases</button>}
                            {user.create_leases && <button id="unit-tab" onClick={handleTabBtnClick} className='border-2 px-2'>Units</button>}
                        </div>
                        <div className="flex flex-row">
                            {tabView == "tasks-tab" && (
                                <section className='w-full'>
                                    <div className="bg-gray-100 p-8 flex flex-col">
                                        <div className="flex flex-row">
                                            <h1 className="text-2xl font-bold mb-8">Tasks</h1>
                                        </div>
                                        <div className="flex flex-row gap-x-2 mb-4">
                                            <button className='bg-white px-4 py-2 rounded-lg shadow-md' onClick={handleCreateTaskClick}>Create Task</button>
                                            <form action={handleAddCategory} className="relative">
                                                <input type="text" name="createCategory" placeholder="New Category" className="bg-white px-10 py-2 rounded-lg shadow-md"></input>
                                                <button className="absolute hover:cursor-pointer inset-y-0 left-0 flex items-center pl-3">
                                                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
                                                        <path fillRule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clipRule="evenodd" />
                                                    </svg>
                                                </button>
                                            </form>
                                            <select onChange={handleCategorySelectChange} className='bg-white px-4 py-2 rounded-lg shadow-md' name="categorySelect" id="categorySelect">
                                                <option value="all">All Categories</option>
                                                {categories.map((category, index) => (
                                                    <option key={index} value={category}>
                                                        {category}
                                                    </option>
                                                ))}
                                            </select>
                                        </div>

                                        {!createTaskView && (
                                            <>
                                                <div className="flex flex-row">
                                                    <div className="flex flex-col w-1/3">
                                                        <h1 className="flex flex-row font-bold">Todo</h1>
                                                        <div className="row" id='todo-tasks'></div>
                                                    </div>
                                                    <div className="flex flex-col w-1/3">
                                                        <h1 className="flex flex-row font-bold">In-Progress</h1>
                                                        <div className="row" id='in-progress-tasks'></div>
                                                    </div>
                                                    <div className="flex flex-col w-1/3">
                                                        <h1 className="flex flex-row font-bold">Complete</h1>
                                                        <div className="row" id='complete-tasks'></div>
                                                    </div>
                                                </div>
                                                <div className="flex flex-row">
                                                    <div className="flex flex-col w-1/3">
                                                        {tasks.map((task, index) => {
                                                            if (task.status != "todo") return;
                                                            if (categoryFilter != "all" && task.category != categoryFilter) return;
                                                            return (
                                                                <div key={index} id={task.id.toString()} className='flex flex-row'>
                                                                    <div className="flex flex-col">
                                                                        <h1 className='flex flex-row'>{task.title}</h1>
                                                                        <p className='flex flex-row'>{task.description}</p>
                                                                        <p className='flex flex-row'>{task.assigned_employees}</p>
                                                                        <p className='flex flex-row'>{task.category}</p>
                                                                        <p className='flex flex-row'>{new Date(task.created_timestamp).toLocaleDateString()}</p>
                                                                        <select onChange={handleSelectChange} name="statusSelector" defaultValue="todo" className='rounded-md flex flex-row'>
                                                                            <option value="todo">Todo</option>
                                                                            <option value="in-progress">In Progress</option>
                                                                            <option value="completed">Completed</option>
                                                                        </select>
                                                                    </div>
                                                                </div>)
                                                        })}
                                                    </div>
                                                    <div className="flex flex-col w-1/3">
                                                        {tasks.map((task, index) => {
                                                            if (task.status != "in-progress") return;
                                                            if (categoryFilter != "all" && task.category != categoryFilter) return;
                                                            return (
                                                                <div key={index} id={task.id.toString()} className='flex flex-row'>
                                                                    <div className="flex flex-col">
                                                                        <h1 className='flex flex-row'>{task.title}</h1>
                                                                        <p className='flex flex-row'>{task.description}</p>
                                                                        <p className='flex flex-row'>{task.assigned_employees}</p>
                                                                        <p className='flex flex-row'>{task.category}</p>
                                                                        <p className='flex flex-row'>{new Date(task.created_timestamp).toLocaleDateString()}</p>
                                                                        <select onChange={handleSelectChange} name="statusSelector" defaultValue="in-progress" className='rounded-md'>
                                                                            <option value="in-progress">In Progress</option>
                                                                            <option value="completed">Completed</option>
                                                                            <option value="todo">Todo</option>
                                                                        </select>
                                                                    </div>
                                                                </div>
                                                            )
                                                        })}
                                                    </div>
                                                    <div className="flex flex-col w-1/3">
                                                        {tasks.map((task, index) => {
                                                            if (task.status != "completed") return;
                                                            if (categoryFilter != "all" && task.category != categoryFilter) return;
                                                            return (
                                                                <div key={index} id={task.id.toString()} className='flex flex-row'>
                                                                    <div className="flex flex-col">
                                                                        <h1 className='flex flex-row'>{task.title}</h1>
                                                                        <p className='flex flex-row'>{task.description}</p>
                                                                        <p className='flex flex-row'>{task.assigned_employees}</p>
                                                                        <p className='flex flex-row'>{task.category}</p>
                                                                        <p className='flex flex-row'>{new Date(task.created_timestamp).toLocaleDateString()}</p>
                                                                        <select onChange={handleSelectChange} name="statusSelector" defaultValue="completed" className='rounded-md'>
                                                                            <option value="completed">Completed</option>
                                                                            <option value="todo">Todo</option>
                                                                            <option value="in-progress">In Progress</option>
                                                                        </select>
                                                                    </div>
                                                                </div>
                                                            )
                                                        })}
                                                    </div>

                                                </div>
                                            </>
                                        )}
                                        {createTaskView && (
                                            <form action={handleSubmitTask}>
                                                <div className="flex flex-row gap-x-2">
                                                    <div className="flex flex-col w-1/2">
                                                        <label htmlFor="title">Task Title</label>
                                                        <input name="title" type="text" />
                                                    </div>
                                                    <div className="flex flex-col w-1/2">
                                                        <label htmlFor="categorySelect">Select Category</label>
                                                        <select name="categorySelect" className='h-full' id="categorySelect">
                                                            {categories.map((category, index) => (
                                                                <option key={index} value={category}>
                                                                    {category}
                                                                </option>
                                                            ))}
                                                        </select>
                                                    </div>
                                                </div>
                                                <div className="flex flex-row w-full mt-4">
                                                    <textarea name="description" id="description" className='w-full' rows={10}></textarea>
                                                </div>
                                                <div className="flex flex-row mt-4 gap-x-4">
                                                    <div className="flex flex-col w-1/2">
                                                        <label htmlFor="employeeSearch">Assign Employees</label>
                                                        <input type="text" name='employeeSearch' className='px-4 py-2' onChange={handleEmployeeSearch} />

                                                        <div id='employeeRender' className='mt-4'>
                                                            {relevantEmployees.length == 0 && (
                                                                <h1>No Results</h1>
                                                            )}
                                                            {relevantEmployees.length > 0 && relevantEmployees.map((employee: TaskEmployee, index) => {
                                                                return (
                                                                    <div className='bg-white border-2 border-gray-100 px-4 py-2 rounded-sm flex flex-row' id={employee.id} key={index} onClick={handleEmployeeAssignation}>
                                                                        <p id='employee-name' className='flex flex-col w-1/2'>{employee.name}</p>
                                                                        <p className='border-2 rounded-md flex flex-col w-1/2 text-center hover:cursor-pointer'>Assign</p>
                                                                    </div>
                                                                )
                                                            })}
                                                        </div>
                                                    </div>
                                                    <div className="flex flex-col w-1/2">
                                                        <h1>Assigned Employees</h1>
                                                        {assignedEmployees.length > 0 && (
                                                            assignedEmployees.map((employee: TaskEmployee, index) => {
                                                                return <h1 key={index}>{employee.name} - {employee.id}</h1>
                                                            })
                                                        )}
                                                    </div>
                                                </div>
                                                <div className="flex flex-row">
                                                    <button type="submit" className='border-2 px-4 py-2 mt-4'>Submit Task</button>
                                                </div>
                                            </form>
                                        )}
                                    </div>
                                </section>
                            )}
                            {(tabView == "applications-tab" && user.approve_applications) && (
                                <section className='flex flex-col'>
                                    <div className='flex flex-row gap-x-2'>
                                        <select onChange={handleApplicantStatusFilterChange} defaultValue="In Progress" className='border-2 px-2' name="filter-applicant-status" id="filter-applicant-status">
                                            <option value="In Progress">In Progress</option>
                                            <option value="Accepted">Accepted</option>
                                            <option value="Rejected">Rejected</option>
                                        </select>
                                        <input onChange={handleApplicantNameSearchChange} className='border-2 px-2' type="text" name='search-applicant-name' id='search-applicant-name' placeholder='Search Applicant' />
                                    </div>
                                    <div className="flex flex-row mt-2">
                                        <RentalApplications statusFilter={applicationProgressFilter} nameFilter={applicantSearchFilter} user={user} />
                                    </div>
                                </section>
                            )}
                            {(tabView == "requests-tab" && user.tasks_admin) && (
                                <section className='w-full'>
                                    <div className="bg-gray-100 p-8 flex flex-col">
                                        <div className="flex flex-row">
                                            <h1 className="text-2xl font-bold mb-8">Incoming Requests</h1>
                                        </div>
                                        <MaintenanceRequests user={user} categories={categories} handleEmployeeSearch={handleEmployeeSearch} relevantEmployees={relevantEmployees} handleEmployeeAssignation={handleEmployeeAssignation} assignedEmployees={assignedEmployees} handleSubmitTask={handleSubmitTask} fetchUpdates={fetchUpdates} handleSelectChange={handleSelectChange} />
                                    </div>
                                </section>
                            )}
                            {(tabView == "complaints-tab" && user.tasks_admin) && (
                                <section className='w-full'>
                                    <div className="bg-gray-100 p-8 flex flex-col">
                                        <div className="flex flex-row">
                                            <h1 className="text-2xl font-bold mb-8">Incoming Complaints</h1>
                                        </div>
                                        <Complaints />
                                    </div>
                                </section>
                            )}
                            {(tabView == "leases-tab" && user.create_leases) && (
                                <section className='w-full'>
                                    <div className="bg-gray-100 p-8 flex flex-col">
                                        <div className="flex flex-row">
                                            <h1 className="text-2xl font-bold mb-8">Leases</h1>
                                        </div>
                                        <Leases />
                                    </div>
                                </section>
                            )}
                            {(tabView == "unit-tab" && user.tasks_admin) && (
                                <section className='w-full'>
                                    <div className="bg-gray-100 p-8 flex flex-col gap-y-2">
                                        <div className="flex flex-row">
                                            <h1 className="text-2xl font-bold mb-8">Units</h1>
                                        </div>
                                        <div className="flex flex-row gap-x-2">
                                            <select onChange={unitPropertySelectorChange} name="propertySelector" id="propertySelector" className='flex flex-col w-2/5 px-2 py-1 rounded-md'>
                                                <option value="all">All</option>
                                                <option value="theArborVictorianLiving">The Arbor Victorian Living</option>
                                                <option value="arborVitaliaCourtyard">Arbor Vitalia Courtyard</option>
                                            </select>
                                            <select name="generateReportSelector" id="generateReportSelector" className='w-1/5 px-2 py-1 rounded-md'>
                                                <option value="rent-roll">Rent Roll</option>
                                                {reportTypes.map((reportType, index) => {
                                                    return (
                                                        <option key={index} value={reportType}>
                                                            {reportType.replaceAll("_", " ")}
                                                        </option>
                                                    )
                                                })}
                                            </select>
                                            <button onClick={generateReport} className='bg-white rounded-md px-4 py-1'>Generate</button>
                                        </div>

                                        <Units unitPropertyFilter={unitPropertyFilter} />
                                    </div>
                                </section>
                            )}
                        </div>
                    </div>
                </>

OLD TASK:
               // <>
                //     <div className="flex flex-row">
                //         <div className="flex flex-col w-1/3">
                //             <h1 className="flex flex-row font-bold">Todo</h1>
                //             <div className="row" id='todo-tasks'></div>
                //         </div>
                //         <div className="flex flex-col w-1/3">
                //             <h1 className="flex flex-row font-bold">In-Progress</h1>
                //             <div className="row" id='in-progress-tasks'></div>
                //         </div>
                //         <div className="flex flex-col w-1/3">
                //             <h1 className="flex flex-row font-bold">Complete</h1>
                //             <div className="row" id='complete-tasks'></div>
                //         </div>
                //     </div>
                //     <div className="flex flex-row">
                //         <div>
                //             {tasks.map((task, index) => {
                //                 return (
                //                     <div className='flex flex-row'>
                //                         <h1>{task.title}</h1>
                //                         <h1>{task.category}</h1>
                //                         <h1>{task.status}</h1>
                //                     </div>
                //                 )
                //             })}
                //         </div>
                //         <>{/* <div className="flex flex-col w-1/3">
                //             {tasks.map((task, index) => {
                //                 if (task.status != "todo") return;
                //                 if (categoryFilter != "all" && task.category != categoryFilter) return;
                //                 return (
                //                     <div key={index} id={task.id.toString()} className='flex flex-row'>
                //                         <div className="flex flex-col">
                //                             <h1 className='flex flex-row'>{task.title}</h1>
                //                             <p className='flex flex-row'>{task.description}</p>
                //                             <p className='flex flex-row'>{task.assigned_employees}</p>
                //                             <p className='flex flex-row'>{task.category}</p>
                //                             <p className='flex flex-row'>{new Date(task.created_timestamp).toLocaleDateString()}</p>
                //                             <select onChange={handleSelectChange} name="statusSelector" defaultValue="todo" className='rounded-md flex flex-row'>
                //                                 <option value="todo">Todo</option>
                //                                 <option value="in-progress">In Progress</option>
                //                                 <option value="completed">Completed</option>
                //                             </select>
                //                         </div>
                //                     </div>)
                //             })}
                //         </div>
                //         <div className="flex flex-col w-1/3">
                //             {tasks.map((task, index) => {
                //                 if (task.status != "in-progress") return;
                //                 if (categoryFilter != "all" && task.category != categoryFilter) return;
                //                 return (
                //                     <div key={index} id={task.id.toString()} className='flex flex-row'>
                //                         <div className="flex flex-col">
                //                             <h1 className='flex flex-row'>{task.title}</h1>
                //                             <p className='flex flex-row'>{task.description}</p>
                //                             <p className='flex flex-row'>{task.assigned_employees}</p>
                //                             <p className='flex flex-row'>{task.category}</p>
                //                             <p className='flex flex-row'>{new Date(task.created_timestamp).toLocaleDateString()}</p>
                //                             <select onChange={handleSelectChange} name="statusSelector" defaultValue="in-progress" className='rounded-md'>
                //                                 <option value="in-progress">In Progress</option>
                //                                 <option value="completed">Completed</option>
                //                                 <option value="todo">Todo</option>
                //                             </select>
                //                         </div>
                //                     </div>
                //                 )
                //             })}
                //         </div>
                //         <div className="flex flex-col w-1/3">
                //             {tasks.map((task, index) => {
                //                 if (task.status != "completed") return;
                //                 if (categoryFilter != "all" && task.category != categoryFilter) return;
                //                 return (
                //                     <div key={index} id={task.id.toString()} className='flex flex-row'>
                //                         <div className="flex flex-col">
                //                             <h1 className='flex flex-row'>{task.title}</h1>
                //                             <p className='flex flex-row'>{task.description}</p>
                //                             <p className='flex flex-row'>{task.assigned_employees}</p>
                //                             <p className='flex flex-row'>{task.category}</p>
                //                             <p className='flex flex-row'>{new Date(task.created_timestamp).toLocaleDateString()}</p>
                //                             <select onChange={handleSelectChange} name="statusSelector" defaultValue="completed" className='rounded-md'>
                //                                 <option value="completed">Completed</option>
                //                                 <option value="todo">Todo</option>
                //                                 <option value="in-progress">In Progress</option>
                //                             </select>
                //                         </div>
                //                     </div>
                //                 )
                //             })}
                //         </div> */}
                //         </>
                //     </div>
                // </>

OLD Requests
<div className="flex flex-col w-1/3">
                <h1 className="flex flex-row font-bold mb-4">Todo</h1>
                {maintenanceRequests.length > 0 && maintenanceRequests.map((request: MaintenanceRequest, index) => {
                    if (request.status == "todo") {
                        return (
                            <div className="flex flex-row gap-x-2" key={index}>
                                <div id={request.id.toString()} className="flex flex-col">
                                    <h1 id='tenant-name'>{request.tenant_name}</h1>
                                    <h1 id='unit'>{request.unit}</h1>
                                    <p id='description'>{request.description}</p>
                                    <p id='property'>{request.property}</p>
                                    <h1 id='date'>{new Date(request.date_time).toLocaleString()}</h1>
                                    {!request.is_task && <button className='border-2 px-4 py-2 bg-white' id={request.id.toString()} onClick={handleMaintenanceRequestToTask}>Create Task</button>}
                                    <select onChange={handleSelectChange} name="statusSelector" defaultValue="todo" className='rounded-md flex flex-row'>
                                        <option value="todo">Todo</option>
                                        <option value="in-progress">In Progress</option>
                                        <option value="completed">Completed</option>
                                    </select>
                                </div>
                            </div>
                        )
                    }
                })}
            </div>
            <div className="flex flex-col w-1/3">
                <h1 className="flex flex-row font-bold mb-4">In Progress</h1>
                {maintenanceRequests.length > 0 && maintenanceRequests.map((request: MaintenanceRequest, index) => {
                    if (request.status == "in-progress") {
                        return (
                            <div className="flex flex-row gap-x-2" key={index}>
                                <div id={request.id.toString()} className="flex flex-col">
                                    <h1 id='tenant-name'>{request.tenant_name}</h1>
                                    <h1 id='unit'>{request.unit}</h1>
                                    <p id='description'>{request.description}</p>
                                    <h1 id='date'>{new Date(request.date_time).toLocaleString()}</h1>
                                    {!request.is_task && <button className='border-2 px-4 py-2 bg-white' id={request.id.toString()} onClick={handleMaintenanceRequestToTask}>Create Task</button>}
                                    <select onChange={handleSelectChange} name="statusSelector" defaultValue="in-progress" className='rounded-md flex flex-row'>
                                        <option value="todo">Todo</option>
                                        <option value="in-progress">In Progress</option>
                                        <option value="completed">Completed</option>
                                    </select>
                                </div>
                            </div>
                        )
                    }
                })}
            </div>
            <div className="flex flex-col w-1/3">
                <h1 className="flex flex-row font-bold mb-4">Completed</h1>
                {maintenanceRequests.length > 0 && maintenanceRequests.map((request: MaintenanceRequest, index) => {
                    if (request.status == "completed") {
                        return (
                            <div className="flex flex-row gap-x-2" key={index}>
                                <div id={request.id.toString()} className="flex flex-col">
                                    <h1 id='tenant-name'>{request.tenant_name}</h1>
                                    <h1 id='unit'>{request.unit}</h1>
                                    <p id='description'>{request.description}</p>
                                    <h1 id='date'>{new Date(request.date_time).toLocaleString()}</h1>
                                    {!request.is_task && <button className='border-2 px-4 py-2 bg-white' id={request.id.toString()} onClick={handleMaintenanceRequestToTask}>Create Task</button>}
                                    <select onChange={handleSelectChange} name="statusSelector" defaultValue="completed" className='rounded-md flex flex-row'>
                                        <option value="todo">Todo</option>
                                        <option value="in-progress">In Progress</option>
                                        <option value="completed">Completed</option>
                                    </select>
                                </div>
                            </div>
                        )
                    }
                })}
            </div>

Complaints
<div className="flex flex-row gap-x-2">
                <div className="flex flex-col w-1/3">
                    <h1 className="flex flex-row font-bold mb-4">Pending</h1>
                    {complaints.length > 0 && complaints.map((complaint: Complaint, index) => {
                        if (complaint.status == "pending" && (typeFilter == "all" ? true : complaint.type == typeFilter)) {
                            return (
                                <div className="flex flex-row gap-x-2" key={index}>
                                    <div className="flex flex-col">
                                        <h1>{complaint.details}</h1>
                                        <h1>{new Date(complaint.timestamp).toLocaleString()}</h1>
                                        {typeFilter == "all" && <h1>{complaint.type.charAt(0).toUpperCase() + complaint.type.slice(1)}</h1>}
                                    </div>
                                </div>
                            )
                        }
                    })}
                </div>
                <div className="flex flex-col w-1/3">
                    <h1 className="flex flex-row font-bold mb-4">Reviewed</h1>
                    {complaints.length > 0 && complaints.map((complaint: Complaint, index) => {
                        if (complaint.status == "reviewed" && (typeFilter == "all" ? true : complaint.type == typeFilter)) {
                            return (
                                <div className="flex flex-row gap-x-2" key={index}>
                                    <div className="flex flex-col">
                                        <h1>{complaint.details}</h1>
                                        <h1>{new Date(complaint.timestamp).toLocaleString()}</h1>
                                        {typeFilter == "all" && <h1>{complaint.type}</h1>}
                                    </div>
                                </div>
                            )
                        }
                    })}
                </div>
                <div className="flex flex-col w-1/3">
                    <h1 className="flex flex-row font-bold mb-4">Completed</h1>
                    {complaints.length > 0 && complaints.map((complaint: Complaint, index) => {
                        if (complaint.status == "resolved" && (typeFilter == "all" ? true : complaint.type == typeFilter)) {
                            return (
                                <div className="flex flex-row gap-x-2" key={index}>
                                    <div className="flex flex-col">
                                        <h1>{complaint.details}</h1>
                                        <h1>{new Date(complaint.timestamp).toLocaleString()}</h1>
                                        {typeFilter == "all" && <h1>{complaint.type}</h1>}
                                    </div>
                                </div>
                            )
                        }
                    })}
                </div>
            </div>

Leases
</div>
            <div className="flex flex-row items-center gap-x-2">
                <div className="flex gap-y-1 flex-col w-1/3">
                    {leases.length > 0 && leases.map((lease: Lease, index) => {
                        const diffTime = new Date().getTime() - new Date(lease.effective_date).getTime();
                        const diffMonths = diffTime / (1000 * 60 * 60 * 24 * 30);

                        if (diffMonths <= 1 && diffMonths > 0) {
                            return (

                                <div key={index} className="flex flex-row">
                                    <div id={lease.id.toString()} className="flex gap-y-1 flex-col">
                                        <h1>Unit: {lease.unit}</h1>
                                        <h1>{lease.property == "theArborVictorianLiving" ? "The Arbor Victorian Living" : "Vitalia Courtyard"}</h1>
                                        <h1>${lease.rental_amount}</h1>
                                        <h1>Effective: {new Date(lease.effective_date).toLocaleDateString()}</h1>
                                        <h1>Termination: {new Date(lease.termination_date).toLocaleDateString()}</h1>
                                        <a download={lease.id} href={`/api/files?type=lease&filename=${lease.id}.xlsx`} className="flex flex-col underline">Download Lease</a>
                                        {!lease.signed && <button onClick={handleLeaseConfirmation} className='px-4 py-1 border-2 bg-white'>Confirm Lease</button>}
                                    </div>
                                </div>
                            )
                        } else {
                            return;
                        }
                    })}
                </div>
                <div className="flex gap-y-1 flex-col w-1/3">
                    {leases.length > 0 && leases.map((lease: Lease, index) => {
                        const diffTime = new Date(lease.effective_date).getTime() - new Date().getTime();
                        const diffMonths = diffTime / (1000 * 60 * 60 * 24 * 30);

                        if (diffMonths < 3 && diffMonths > 1) {
                            return (

                                <div key={index} className="flex flex-row">
                                    <div id={lease.id.toString()} className="flex gap-y-1 flex-col">
                                        <h1>Unit: {lease.unit}</h1>
                                        <h1>{lease.property == "theArborVictorianLiving" ? "The Arbor Victorian Living" : "Vitalia Courtyard"}</h1>
                                        <h1>${lease.rental_amount}</h1>
                                        <h1>Effective: {new Date(lease.effective_date).toLocaleDateString()}</h1>
                                        <h1>Termination: {new Date(lease.termination_date).toLocaleDateString()}</h1>
                                        <a download={lease.id} href={`/api/files?type=lease&filename=${lease.id}.xlsx`} className="flex flex-col underline">Download Lease</a>
                                        {!lease.signed && <button onClick={handleLeaseConfirmation} className='px-4 py-1 border-2 bg-white'>Confirm Lease</button>}
                                    </div>
                                </div>
                            )
                        } else {
                            return;
                        }
                    })}
                </div>
                <div className="flex flex-col w-1/3">
                    {leases.length > 0 && leases.map((lease: Lease, index) => {
                        const diffTime = new Date(lease.effective_date).getTime() - new Date().getTime();
                        const diffMonths = diffTime / (1000 * 60 * 60 * 24 * 30);

                        if (diffMonths < 6 && diffMonths > 3) {
                            return (

                                <div key={index} className="flex flex-row">
                                    <div id={lease.id.toString()} className="flex gap-y-1 flex-col">
                                        <h1>Unit: {lease.unit}</h1>
                                        <h1>{lease.property == "theArborVictorianLiving" ? "The Arbor Victorian Living" : "Vitalia Courtyard"}</h1>
                                        <h1>${lease.rental_amount}</h1>
                                        <h1>Effective: {new Date(lease.effective_date).toLocaleDateString()}</h1>
                                        <h1>Termination: {new Date(lease.termination_date).toLocaleDateString()}</h1>
                                        <a download={lease.id} href={`/api/files?type=lease&filename=${lease.id}.xlsx`} className="flex flex-col underline">Download Lease</a>
                                        {!lease.signed && <button onClick={handleLeaseConfirmation} className='px-4 py-1 border-2 bg-white'>Confirm Lease</button>}
                                    </div>
                                </div>
                            )
                        } else {
                            return;
                        }
                    })}
                </div>
            </div> 

OLD LOGIN
        {/* <div className="aspect-w-16 aspect-h-9">
          <Image layout="fill" src="/login-logo.png" alt="Description" className="object-cover w-full h-full" />
        </div>
        <div className="absolute inset-0 flex flex-row">
          <div className="flex flex-col w-[45%] p-8">
            <h1 className={"flex flex-row text-white text-2xl " + p400.className}>Welcome Back!</h1>
            <p className={"flex flex-row text-white text-xs mt-4 " + p300.className} >We&apos;re happy to have you here. Please log in to continue.</p>

            <div className="flex flex-row mt-6">
              <div className="w-full">
                <div className="flex flex-row bg-[#101D26] rounded-t-md items-center px-2 h-12">
                  <div className="flex flex-col w-1/5 p-2">
                    <Image layout="fill" className="w-[1.5rem] h-auto" src="/icons/Mail.png" alt="" />
                  </div>
                  <div className="flex flex-col justify-center w-4/5">
                    <label htmlFor="username" className={"text-white text-xs " + r400.className}>Email Address</label>
                    <input className={"w-full bg-[#101D26] text-white text-xs underline decoration-slate-500 " + r300.className} type="text" name="username" placeholder="Your email address..." />
                  </div>
                </div>
                <div className="flex flex-row bg-white rounded-b-md items-center px-2 h-12">
                  <div className="flex flex-col w-1/5 p-2">
                    <Image layout="fill" className="w-[1.5rem] h-auto" src="/icons/Lock.png" alt="" />
                  </div>
                  <div className="flex flex-col justify-center w-4/5">
                    <label htmlFor="password" className={"text-[#101D26] text-xs " + r400.className}>Password</label>
                    <input className={"w-full text-[#101D26] text-xs underline decoration-slate-500 " + r300.className} type="password" name="password" placeholder="Your password..." />
                  </div>
                </div>
              </div>
            </div>
            <div className={"flex flex-row items-center text-white text-sm mt-4 " + r400.className} >
              <div className="flex items-center">
                <input readOnly checked className="accent-white" type="checkbox" name="remember" id="remember" />
                <label htmlFor="remember" className="ml-2 text-xs">You&apos;re Remembered</label>
              </div>
              <a href="#" className="ml-auto text-xs">Forgot Password?</a>
            </div>
            <div className={"flex flex-row gap-x-4 mt-6 text-white text-xs items-center  " + r400.className}>
              <button className={"bg-[#73ACC9] text-[#101D26] text-xs w-24 h-8 rounded-sm " + r300.className} type="submit">Login</button>
              or
              <a href="/apply" className={"flex bg-[#101D26] text-white text-xs w-24 h-8 rounded-sm text-center items-center justify-center " + r300.className}>Apply</a>
            </div>
          </div>
          <div className="flex flex-col w-[55%]"></div>
        </div> */}